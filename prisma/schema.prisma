generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  teams         TeamMember[]
  invitations   Invitation[]
  passwordReset PasswordReset?
  
  // New relations
  sentMessages     Message[]        @relation("MessageSender")
  receivedMessages Message[]        @relation("MessageReceiver")
  posts            Post[]
  comments         Comment[]
  groups           GroupMember[]
  ownedGroups      Group[]          @relation("GroupOwner")
  reactions        Reaction[]
  sharedPosts      SharedPost[]     @relation("PostSharer")
  receivedShares   SharedPost[]     @relation("PostReceiver")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?
  defaultRole Role     @default(MEMBER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     TeamMember[]
  invitations Invitation[]
}

model TeamMember {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  teamId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  expires   DateTime
  teamId    String
  invitedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

// New models for messaging system
model Message {
  id          String   @id @default(cuid())
  content     String   @db.Text
  read        Boolean  @default(false)
  senderId    String
  receiverId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sharedPostId String?

  sender      User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sharedPost  SharedPost? @relation(fields: [sharedPostId], references: [id], onDelete: SetNull)
}

// New models for posting system
model Post {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  published   Boolean  @default(true)
  authorId    String
  groupId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  group       Group?   @relation(fields: [groupId], references: [id], onDelete: SetNull)
  comments    Comment[]
  reactions   Reaction[]
  attachments Attachment[]
  shares      SharedPost[]
}

model Comment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  authorId    String
  postId      String
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent      Comment? @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentToComment")
  reactions   Reaction[]
}

model Attachment {
  id          String   @id @default(cuid())
  url         String
  filename    String
  mimeType    String
  size        Int
  postId      String
  createdAt   DateTime @default(now())

  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Reaction {
  id          String       @id @default(cuid())
  type        ReactionType
  userId      String
  postId      String?
  commentId   String?
  createdAt   DateTime     @default(now())

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment     Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId, type])
}

// Model for shared posts
model SharedPost {
  id          String   @id @default(cuid())
  postId      String
  sharerId    String
  receiverId  String
  message     String?  @db.Text
  createdAt   DateTime @default(now())
  
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  sharer      User     @relation("PostSharer", fields: [sharerId], references: [id], onDelete: Cascade)
  receiver    User     @relation("PostReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  messages    Message[]
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

// New models for group creation system
model Group {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  slug        String   @unique
  isPrivate   Boolean  @default(false)
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User     @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     GroupMember[]
  posts       Post[]
}

model GroupMember {
  id        String     @id @default(cuid())
  role      GroupRole  @default(MEMBER)
  groupId   String
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  group     Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}